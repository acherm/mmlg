/**
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.xtext.example.mydsl.mmlg.AllVariables;
import org.xtext.example.mydsl.mmlg.CSVParsingConfiguration;
import org.xtext.example.mydsl.mmlg.CSVSeparator;
import org.xtext.example.mydsl.mmlg.CrossValidation;
import org.xtext.example.mydsl.mmlg.DT;
import org.xtext.example.mydsl.mmlg.DataInput;
import org.xtext.example.mydsl.mmlg.FormulaItem;
import org.xtext.example.mydsl.mmlg.FrameworkLang;
import org.xtext.example.mydsl.mmlg.LogisticRegression;
import org.xtext.example.mydsl.mmlg.MLAlgorithm;
import org.xtext.example.mydsl.mmlg.MLChoiceAlgorithm;
import org.xtext.example.mydsl.mmlg.MMLModel;
import org.xtext.example.mydsl.mmlg.PredictorVariables;
import org.xtext.example.mydsl.mmlg.RFormula;
import org.xtext.example.mydsl.mmlg.RandomForest;
import org.xtext.example.mydsl.mmlg.SVM;
import org.xtext.example.mydsl.mmlg.SVMClassification;
import org.xtext.example.mydsl.mmlg.SVMKernel;
import org.xtext.example.mydsl.mmlg.StratificationMethod;
import org.xtext.example.mydsl.mmlg.TrainingTest;
import org.xtext.example.mydsl.mmlg.Validation;
import org.xtext.example.mydsl.mmlg.ValidationMetric;
import org.xtext.example.mydsl.mmlg.XFormula;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MmlgGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final MMLModel m = ((MMLModel) _get);
    String outputFileName = "programm.py";
    final MLChoiceAlgorithm mlAlgorithm = m.getAlgorithm();
    if ((mlAlgorithm != null)) {
      final FrameworkLang frmwk = mlAlgorithm.getFramework();
      if (((frmwk != null) && Objects.equal(frmwk, FrameworkLang.R))) {
        outputFileName = "programm.R";
      }
    }
    fsa.generateFile(outputFileName, this.compile_bis(m));
  }
  
  private String compile_bis(final MMLModel m) {
    final DataInput dataInput = m.getInput();
    final String fileLocation = dataInput.getFilelocation();
    final MLChoiceAlgorithm mlAlgorithm = m.getAlgorithm();
    FrameworkLang frmwk = FrameworkLang.SCIKIT;
    MLAlgorithm algo = ((MLAlgorithm) null);
    if ((mlAlgorithm != null)) {
      algo = mlAlgorithm.getAlgorithm();
      frmwk = mlAlgorithm.getFramework();
    }
    final CSVSeparator DEFAULT_COLUMN_SEPARATOR = CSVSeparator.COMMA;
    CSVSeparator csv_separator = DEFAULT_COLUMN_SEPARATOR;
    final CSVParsingConfiguration parsingInstruction = dataInput.getParsingInstruction();
    if ((parsingInstruction != null)) {
      InputOutput.<String>println(("parsing instruction..." + parsingInstruction));
      csv_separator = parsingInstruction.getSep();
      boolean _equals = CSVSeparator.SEMI_COLON.equals(csv_separator);
      if (_equals) {
        csv_separator = CSVSeparator.SEMI_COLON;
      } else {
        boolean _equals_1 = CSVSeparator.COMMA.equals(csv_separator);
        if (_equals_1) {
          csv_separator = CSVSeparator.COMMA;
        }
      }
    }
    boolean _equals_2 = Objects.equal(frmwk, FrameworkLang.SCIKIT);
    if (_equals_2) {
      String pythonImport = "import pandas as pd\n";
      String _pythonImport = pythonImport;
      pythonImport = (_pythonImport + "import sklearn\n");
      String _mkValueInSingleQuote = this.mkValueInSingleQuote(fileLocation);
      String _plus = ("mml_data = pd.read_csv(" + _mkValueInSingleQuote);
      String _plus_1 = (_plus + ", sep=");
      String _mkValueInSingleQuote_1 = this.mkValueInSingleQuote(csv_separator.getLiteral());
      String _plus_2 = (_plus_1 + _mkValueInSingleQuote_1);
      final String csvReading = (_plus_2 + ")\n");
      String pandasCode = (pythonImport + csvReading);
      if ((mlAlgorithm == null)) {
        return pandasCode;
      }
      String algoML = "";
      InputOutput.<String>println("algo");
      if ((algo instanceof SVM)) {
        InputOutput.<String>println("SVM");
        algoML = "from sklearn import svm\n";
        final SVM svm = ((SVM) algo);
        String gamma = svm.getGamma();
        if ((gamma == null)) {
          InputOutput.<String>println("gamma non specifie");
          gamma = "auto_deprecated";
        }
        String C = svm.getC();
        if ((C == null)) {
          InputOutput.<String>println("C non specifie");
          C = "1.0";
        }
        SVMKernel kernel = svm.getKernel();
        String resKernel = "";
        if ((kernel == null)) {
          InputOutput.<String>println("SVMClassification non specifiee");
          resKernel = "rbf";
        } else {
          InputOutput.<String>println("SVMClassification specifiee");
          boolean _equals_3 = SVMKernel.LINEAR.equals(kernel);
          if (_equals_3) {
            kernel = SVMKernel.LINEAR;
          } else {
            boolean _equals_4 = SVMKernel.POLY.equals(kernel);
            if (_equals_4) {
              kernel = SVMKernel.POLY;
            } else {
              boolean _equals_5 = SVMKernel.RADIAL.equals(kernel);
              if (_equals_5) {
                kernel = SVMKernel.RADIAL;
              }
            }
          }
          resKernel = kernel.getLiteral();
        }
        SVMClassification svmClass = svm.getSvmclassification();
        String resClass = "";
        if ((svmClass == null)) {
          InputOutput.<String>println("SVMClassification non specified");
          resClass = "";
        } else {
          InputOutput.<String>println("SVMClassification specified");
          boolean _equals_6 = SVMClassification.CCLASS.equals(svmClass);
          if (_equals_6) {
            svmClass = SVMClassification.CCLASS;
          } else {
            boolean _equals_7 = SVMClassification.NU_CLASS.equals(svmClass);
            if (_equals_7) {
              svmClass = SVMClassification.NU_CLASS;
            } else {
              boolean _equals_8 = SVMClassification.ONE_CLASS.equals(svmClass);
              if (_equals_8) {
                svmClass = SVMClassification.ONE_CLASS;
              }
            }
          }
          resClass = svmClass.getLiteral();
        }
        String _algoML = algoML;
        algoML = (_algoML + (((((("classifier = svm.SVC(gamma= " + gamma) + ",kernel=\'") + resKernel) + "\',C=") + C) + ")\n"));
      } else {
        if ((algo instanceof DT)) {
          InputOutput.<String>println("DT");
          DT dt = ((DT) algo);
          String max_depth = "";
          int _max_depth = dt.getMax_depth();
          boolean _notEquals = (_max_depth != 0);
          if (_notEquals) {
            max_depth = Integer.toString(dt.getMax_depth());
          } else {
            max_depth = "None";
          }
          algoML = (("from sklearn.tree import DecisionTreeClassifier \nclassifier = DecisionTreeClassifier(max_depth=" + max_depth) + ")\n");
        } else {
          if ((algo instanceof LogisticRegression)) {
            InputOutput.<String>println("LogisticRegression");
            final LogisticRegression lr = ((LogisticRegression) algo);
            algoML = "from sklearn.linear_model import LogisticRegression\n";
            String _algoML_1 = algoML;
            algoML = (_algoML_1 + "classifier = LogisticRegression(random_state=0, solver=\'lbfgs\', multi_class=\'multinomial\')\n");
          } else {
            if ((algo instanceof RandomForest)) {
              InputOutput.<String>println("RandomForest");
              final RandomForest rf = ((RandomForest) algo);
              algoML = "from sklearn.ensemble import RandomForestClassifier\n";
              String _algoML_2 = algoML;
              algoML = (_algoML_2 + "classifier = RandomForestClassifier()\n");
            }
          }
        }
      }
      InputOutput.<String>println("Formula");
      final RFormula formula = m.getFormula();
      String codeFormulaX = "";
      String codeFormulaY = "";
      if ((formula == null)) {
        codeFormulaY = "Y = mml_data.iloc[:,-1]\n";
        codeFormulaX = "X = mml_data.iloc[:,:-1]\n";
      } else {
        InputOutput.<String>println("Formule donnee");
        final FormulaItem y = formula.getPredictive();
        final XFormula x = formula.getPredictors();
        if ((y == null)) {
          InputOutput.<String>println("Predictive non renseignee");
          codeFormulaY = "Y = mml_data.iloc[:,-1]\n";
          if ((x instanceof AllVariables)) {
            codeFormulaX = "X = mml_data.iloc[:, :-1] \n";
          } else {
            final PredictorVariables xPred = ((PredictorVariables) x);
            String _colName = xPred.getVars().get(0).getColName();
            boolean _tripleNotEquals = (_colName != null);
            if (_tripleNotEquals) {
              String _colName_1 = xPred.getVars().get(0).getColName();
              String _plus_3 = ("Y = mml_data[[" + _colName_1);
              codeFormulaX = _plus_3;
            } else {
              int _column = xPred.getVars().get(0).getColumn();
              String _plus_4 = ("X = mml_data.iloc[:,[" + Integer.valueOf(_column));
              codeFormulaX = _plus_4;
            }
            for (int i = 1; (i < xPred.getVars().size()); i++) {
              String _colName_2 = xPred.getVars().get(i).getColName();
              boolean _tripleNotEquals_1 = (_colName_2 != null);
              if (_tripleNotEquals_1) {
                String _codeFormulaX = codeFormulaX;
                codeFormulaX = (_codeFormulaX + ",");
                String _codeFormulaX_1 = codeFormulaX;
                String _colName_3 = xPred.getVars().get(i).getColName();
                codeFormulaX = (_codeFormulaX_1 + _colName_3);
              } else {
                String _codeFormulaX_2 = codeFormulaX;
                codeFormulaX = (_codeFormulaX_2 + ",");
                String _codeFormulaX_3 = codeFormulaX;
                int _column_1 = xPred.getVars().get(i).getColumn();
                codeFormulaX = (_codeFormulaX_3 + Integer.valueOf(_column_1));
              }
            }
            String _colName_2 = xPred.getVars().get(0).getColName();
            boolean _tripleNotEquals_1 = (_colName_2 != null);
            if (_tripleNotEquals_1) {
              String _codeFormulaX = codeFormulaX;
              codeFormulaX = (_codeFormulaX + "]] \n");
            } else {
              String _codeFormulaX_1 = codeFormulaX;
              codeFormulaX = (_codeFormulaX_1 + "]] \n");
            }
          }
        } else {
          InputOutput.<String>println("Predictive renseignee");
          String _colName_3 = y.getColName();
          boolean _notEquals_1 = (!Objects.equal(_colName_3, null));
          if (_notEquals_1) {
            InputOutput.<String>println("Predictive est un string");
            String _colName_4 = y.getColName();
            String _plus_5 = ("Y = mml_data[\'" + _colName_4);
            String _plus_6 = (_plus_5 + "\'] \n");
            codeFormulaY = _plus_6;
            if ((x instanceof AllVariables)) {
              InputOutput.<String>println("Toutes les variables sont explicatives");
              String _colName_5 = y.getColName();
              String _plus_7 = ("X = mml_data.loc[:, ~mml_data.columns.isin([\'" + _colName_5);
              String _plus_8 = (_plus_7 + "\'])]\n");
              codeFormulaX = _plus_8;
            }
          } else {
            InputOutput.<String>println("Predictive est un int");
            int _column_1 = y.getColumn();
            String _plus_9 = ("Y = mml_data.iloc[:," + Integer.valueOf(_column_1));
            String _plus_10 = (_plus_9 + "] \n");
            codeFormulaY = _plus_10;
            if ((x instanceof AllVariables)) {
              InputOutput.<String>println("Toutes les variables sont explicatives");
              String _codeFormulaX_2 = codeFormulaX;
              codeFormulaX = (_codeFormulaX_2 + "X = mml_data\n");
              String _codeFormulaX_3 = codeFormulaX;
              int _column_2 = y.getColumn();
              String _plus_11 = ("X.drop(X.columns[" + Integer.valueOf(_column_2));
              String _plus_12 = (_plus_11 + "],axis=1,inplace=True)\n");
              codeFormulaX = (_codeFormulaX_3 + _plus_12);
            }
          }
          if ((x instanceof PredictorVariables)) {
            InputOutput.<String>println("Des variables explicatives ont été données");
            final PredictorVariables xPred_1 = ((PredictorVariables) x);
            String _colName_6 = xPred_1.getVars().get(0).getColName();
            boolean _tripleNotEquals_2 = (_colName_6 != null);
            if (_tripleNotEquals_2) {
              InputOutput.<String>println("Les variables explicatives sont des strings");
              String _colName_7 = xPred_1.getVars().get(0).getColName();
              String _plus_13 = ("X = mml_data[[\'" + _colName_7);
              String _plus_14 = (_plus_13 + "\'");
              codeFormulaX = _plus_14;
            } else {
              InputOutput.<String>println("Les variables explicatives sont des entiers");
              int _column_3 = xPred_1.getVars().get(0).getColumn();
              String _plus_15 = ("X = mml_data.iloc[:,[" + Integer.valueOf(_column_3));
              codeFormulaX = _plus_15;
            }
            for (int i = 1; (i < xPred_1.getVars().size()); i++) {
              String _colName_8 = xPred_1.getVars().get(i).getColName();
              boolean _tripleNotEquals_3 = (_colName_8 != null);
              if (_tripleNotEquals_3) {
                String _codeFormulaX_4 = codeFormulaX;
                codeFormulaX = (_codeFormulaX_4 + ",\'");
                String _codeFormulaX_5 = codeFormulaX;
                String _colName_9 = xPred_1.getVars().get(i).getColName();
                String _plus_16 = (_colName_9 + "\'");
                codeFormulaX = (_codeFormulaX_5 + _plus_16);
              } else {
                String _codeFormulaX_6 = codeFormulaX;
                codeFormulaX = (_codeFormulaX_6 + ",");
                String _codeFormulaX_7 = codeFormulaX;
                int _column_4 = xPred_1.getVars().get(i).getColumn();
                codeFormulaX = (_codeFormulaX_7 + Integer.valueOf(_column_4));
              }
            }
            String _colName_8 = xPred_1.getVars().get(0).getColName();
            boolean _notEquals_2 = (!Objects.equal(_colName_8, null));
            if (_notEquals_2) {
              String _codeFormulaX_4 = codeFormulaX;
              codeFormulaX = (_codeFormulaX_4 + "]] \n");
            } else {
              String _codeFormulaX_5 = codeFormulaX;
              codeFormulaX = (_codeFormulaX_5 + "]] \n");
            }
          }
        }
      }
      InputOutput.<String>println("Validation");
      final Validation validation = m.getValidation();
      final StratificationMethod stratification = validation.getStratification();
      String metricCode = "";
      final EList<ValidationMetric> metric = validation.getMetric();
      InputOutput.<String>println("Metrique");
      for (int i = 0; (i < metric.size()); i++) {
        boolean _equals_9 = ValidationMetric.RECALL.equals(metric.get(i));
        if (_equals_9) {
          String _metricCode = metricCode;
          metricCode = (_metricCode + "print(\'recall = \')\n");
          String _metricCode_1 = metricCode;
          metricCode = (_metricCode_1 + "print(recall)\n");
        } else {
          boolean _equals_10 = ValidationMetric.PRECISION.equals(metric.get(i));
          if (_equals_10) {
            String _metricCode_2 = metricCode;
            metricCode = (_metricCode_2 + "print(\'precision = \')\n");
            String _metricCode_3 = metricCode;
            metricCode = (_metricCode_3 + "print(precision)\n");
          } else {
            boolean _equals_11 = ValidationMetric.F1.equals(metric.get(i));
            if (_equals_11) {
              String _metricCode_4 = metricCode;
              metricCode = (_metricCode_4 + "print(\'f1_score = \')\n");
              String _metricCode_5 = metricCode;
              metricCode = (_metricCode_5 + "print(f1_score)\n");
            }
          }
        }
      }
      String stratificationCode = "";
      InputOutput.<String>println("Stratification");
      if ((stratification instanceof CrossValidation)) {
        InputOutput.<String>println("CrossValidation");
        final CrossValidation cross = ((CrossValidation) stratification);
        final int numRep = cross.getNumber();
        String _stratificationCode = stratificationCode;
        stratificationCode = (_stratificationCode + "from sklearn.model_selection import StratifiedKFold\n");
        String _stratificationCode_1 = stratificationCode;
        stratificationCode = (_stratificationCode_1 + (("skf = StratifiedKFold(n_splits=" + Integer.valueOf(numRep)) + ", shuffle=True)\n"));
        String _stratificationCode_2 = stratificationCode;
        stratificationCode = (_stratificationCode_2 + "recall = 0\n");
        String _stratificationCode_3 = stratificationCode;
        stratificationCode = (_stratificationCode_3 + "f1_score = 0\n");
        String _stratificationCode_4 = stratificationCode;
        stratificationCode = (_stratificationCode_4 + "precision = 0\n");
        String _stratificationCode_5 = stratificationCode;
        stratificationCode = (_stratificationCode_5 + "for train_indices, val_indices in skf.split(X, Y):\n");
        String _stratificationCode_6 = stratificationCode;
        stratificationCode = (_stratificationCode_6 + "    x_train, x_test = X.iloc[train_indices,], X.iloc[val_indices,]\n");
        String _stratificationCode_7 = stratificationCode;
        stratificationCode = (_stratificationCode_7 + "    y_train, y_test = Y[train_indices], Y[val_indices]\n");
        String _stratificationCode_8 = stratificationCode;
        stratificationCode = (_stratificationCode_8 + "    classifier.fit(x_train,y_train)\n");
        String _stratificationCode_9 = stratificationCode;
        stratificationCode = (_stratificationCode_9 + "    y_pred = classifier.predict(x_test)\n");
        String _stratificationCode_10 = stratificationCode;
        stratificationCode = (_stratificationCode_10 + "    recall = recall + sklearn.metrics.recall_score(y_test, y_pred, labels=None, pos_label=1, average=\'macro\')\n");
        String _stratificationCode_11 = stratificationCode;
        stratificationCode = (_stratificationCode_11 + "    precision = precision + sklearn.metrics.precision_score(y_test, y_pred, labels=None, pos_label=1, average=\'macro\')\n");
        String _stratificationCode_12 = stratificationCode;
        stratificationCode = (_stratificationCode_12 + "    f1_score = f1_score + sklearn.metrics.f1_score(y_test, y_pred, labels=None, pos_label=1, average=\'macro\')\n");
        String _stratificationCode_13 = stratificationCode;
        stratificationCode = (_stratificationCode_13 + (("recall = recall /" + Integer.valueOf(numRep)) + "\n"));
        String _stratificationCode_14 = stratificationCode;
        stratificationCode = (_stratificationCode_14 + (("f1_score = f1_score /" + Integer.valueOf(numRep)) + "\n"));
        String _stratificationCode_15 = stratificationCode;
        stratificationCode = (_stratificationCode_15 + (("precision = precision /" + Integer.valueOf(numRep)) + "\n"));
        String _stratificationCode_16 = stratificationCode;
        stratificationCode = (_stratificationCode_16 + (metricCode + "\n"));
      } else {
        InputOutput.<String>println("TrainingTest");
        final TrainingTest trainTest = ((TrainingTest) stratification);
        final int pourcentageTraining = trainTest.getNumber();
        final double pourcentage = ((100 - (pourcentageTraining * 1.0)) / 100);
        String _stratificationCode_17 = stratificationCode;
        stratificationCode = (_stratificationCode_17 + "from sklearn.model_selection import train_test_split\n");
        String _stratificationCode_18 = stratificationCode;
        stratificationCode = (_stratificationCode_18 + (("x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=" + Double.valueOf(pourcentage)) + ")\n"));
        String _stratificationCode_19 = stratificationCode;
        stratificationCode = (_stratificationCode_19 + "classifier.fit(x_train,y_train)\n");
        String _stratificationCode_20 = stratificationCode;
        stratificationCode = (_stratificationCode_20 + "y_pred = classifier.predict(x_test)\n");
        String _stratificationCode_21 = stratificationCode;
        stratificationCode = (_stratificationCode_21 + "recall = sklearn.metrics.recall_score(y_test, y_pred, labels=None, pos_label=1, average=\'macro\')\n");
        String _stratificationCode_22 = stratificationCode;
        stratificationCode = (_stratificationCode_22 + "precision = sklearn.metrics.precision_score(y_test, y_pred, labels=None, pos_label=1, average=\'macro\')\n");
        String _stratificationCode_23 = stratificationCode;
        stratificationCode = (_stratificationCode_23 + "f1_score = sklearn.metrics.f1_score(y_test, y_pred, labels=None, pos_label=1, average=\'macro\')\n");
        String _stratificationCode_24 = stratificationCode;
        stratificationCode = (_stratificationCode_24 + metricCode);
      }
      String _pandasCode = pandasCode;
      pandasCode = (_pandasCode + "\nprint (mml_data)\n");
      String _pandasCode_1 = pandasCode;
      pandasCode = (_pandasCode_1 + codeFormulaY);
      String _pandasCode_2 = pandasCode;
      pandasCode = (_pandasCode_2 + codeFormulaX);
      String _pandasCode_3 = pandasCode;
      pandasCode = (_pandasCode_3 + algoML);
      String _pandasCode_4 = pandasCode;
      pandasCode = (_pandasCode_4 + stratificationCode);
      return pandasCode;
    }
    if ((frmwk == FrameworkLang.R)) {
      String _mkValueInSingleQuote_2 = this.mkValueInSingleQuote(fileLocation);
      String _plus_16 = ("mml_data <- read.csv(" + _mkValueInSingleQuote_2);
      String _plus_17 = (_plus_16 + ", sep=");
      String _mkValueInSingleQuote_3 = this.mkValueInSingleQuote(csv_separator.getLiteral());
      String _plus_18 = (_plus_17 + _mkValueInSingleQuote_3);
      String RcsvReading = (_plus_18 + ")\n");
      String RCode = RcsvReading;
      String RalgoML = "";
      InputOutput.<String>println("algo");
      if ((algo instanceof SVM)) {
        InputOutput.<String>println("SVM");
        SVM svm_1 = ((SVM) algo);
        String gamma_1 = svm_1.getGamma();
        if ((gamma_1 == null)) {
          InputOutput.<String>println("gamma non specifie");
          gamma_1 = "1 / ncol(train)";
        }
        String C_1 = svm_1.getC();
        if ((C_1 == null)) {
          InputOutput.<String>println("C non specifie");
          C_1 = "1";
        }
        SVMKernel kernel_1 = svm_1.getKernel();
        String resKernel_1 = "";
        if ((kernel_1 == null)) {
          InputOutput.<String>println("SVMClassification non specifiee");
          resKernel_1 = "linear";
        } else {
          InputOutput.<String>println("SVMClassification specifiee");
          boolean _equals_9 = SVMKernel.LINEAR.equals(kernel_1);
          if (_equals_9) {
            kernel_1 = SVMKernel.LINEAR;
          } else {
            boolean _equals_10 = SVMKernel.POLY.equals(kernel_1);
            if (_equals_10) {
              kernel_1 = SVMKernel.POLY;
            } else {
              boolean _equals_11 = SVMKernel.RADIAL.equals(kernel_1);
              if (_equals_11) {
                kernel_1 = SVMKernel.RADIAL;
              }
            }
          }
          resKernel_1 = kernel_1.getLiteral();
        }
        SVMClassification svmClass_1 = svm_1.getSvmclassification();
        String resClass_1 = "C-classification";
        boolean _equals_12 = Objects.equal(svmClass_1, null);
        if (_equals_12) {
          InputOutput.<String>println("SVMClassification non specifiee");
        } else {
          InputOutput.<String>println("SVMClassification specifiee");
          boolean _equals_13 = SVMClassification.CCLASS.equals(svmClass_1);
          if (_equals_13) {
            svmClass_1 = SVMClassification.CCLASS;
          } else {
            boolean _equals_14 = SVMClassification.NU_CLASS.equals(svmClass_1);
            if (_equals_14) {
              svmClass_1 = SVMClassification.NU_CLASS;
            } else {
              boolean _equals_15 = SVMClassification.ONE_CLASS.equals(svmClass_1);
              if (_equals_15) {
                svmClass_1 = SVMClassification.ONE_CLASS;
              }
            }
          }
          resClass_1 = svmClass_1.getLiteral();
        }
        String _RalgoML = RalgoML;
        RalgoML = (_RalgoML + "library(e1071)\n");
        String _RalgoML_1 = RalgoML;
        RalgoML = (_RalgoML_1 + (((((((("classifier <- svm(formule,data=train,kernel=\'" + resKernel_1) + "\',type = \'") + resClass_1) + "\' , gamma=") + gamma_1) + ",cost = ") + C_1) + ")\n"));
      } else {
        if ((algo instanceof DT)) {
          InputOutput.<String>println("DT");
          final DT dt_1 = ((DT) algo);
          String max_depth_1 = "";
          String _RalgoML_2 = RalgoML;
          RalgoML = (_RalgoML_2 + "library(rpart)\n");
          int _max_depth_1 = dt_1.getMax_depth();
          boolean _notEquals_3 = (_max_depth_1 != 0);
          if (_notEquals_3) {
            max_depth_1 = Integer.toString(dt_1.getMax_depth());
            String _RalgoML_3 = RalgoML;
            RalgoML = (_RalgoML_3 + (("ctrl <- rpart.control(maxdepth = " + max_depth_1) + ")\n"));
          } else {
            String _RalgoML_4 = RalgoML;
            RalgoML = (_RalgoML_4 + "ctrl <- rpart.control()\n");
          }
          String _RalgoML_5 = RalgoML;
          RalgoML = (_RalgoML_5 + "classifier <- rpart(formule, method=\"class\", data=train,control = ctrl)\n");
        } else {
          if ((algo instanceof LogisticRegression)) {
            InputOutput.<String>println("LogisticRegression");
            final LogisticRegression lr_1 = ((LogisticRegression) algo);
            String _RalgoML_6 = RalgoML;
            RalgoML = (_RalgoML_6 + "install.packages(\'nnet\')\n");
            RalgoML = "library(nnet)\n";
            String _RalgoML_7 = RalgoML;
            RalgoML = (_RalgoML_7 + "classifier <- multinom(formule, data = train)\n");
          } else {
            if ((algo instanceof RandomForest)) {
              InputOutput.<String>println("RandomForest");
              final RandomForest rf_1 = ((RandomForest) algo);
              RalgoML = "library(randomForest)\n";
              String _RalgoML_8 = RalgoML;
              RalgoML = (_RalgoML_8 + "classifier <- randomForest(formule, data = train)\n");
            }
          }
        }
      }
      InputOutput.<String>println("Formule");
      final RFormula formulaR = m.getFormula();
      String nomY = "";
      String nomsX = "";
      String nbPredictive = "";
      boolean _equals_16 = Objects.equal(formulaR, null);
      if (_equals_16) {
        nomY = "nomY = colnames(mml_data)[ncol(mml_data)]\n";
        nbPredictive = "nbPredictive = ncol(mml_data)\n";
        nomsX = "nomsX = \'.\'\n";
      } else {
        InputOutput.<String>println("Formule donnee");
        final FormulaItem y_1 = formulaR.getPredictive();
        final XFormula x_1 = formulaR.getPredictors();
        boolean _equals_17 = Objects.equal(y_1, null);
        if (_equals_17) {
          InputOutput.<String>println("Predictive non renseignee");
          nomY = "nomY = colnames(mml_data)[ncol(mml_data)]\n";
          nbPredictive = "nbPredictive = ncol(mml_data)\n";
          if ((x_1 instanceof AllVariables)) {
            nomsX = "nomsX = \'.\'\n";
          } else {
            final PredictorVariables xPred_2 = ((PredictorVariables) x_1);
            String _colName_9 = xPred_2.getVars().get(0).getColName();
            boolean _notEquals_4 = (!Objects.equal(_colName_9, null));
            if (_notEquals_4) {
              String _colName_10 = xPred_2.getVars().get(0).getColName();
              String _plus_19 = ("nomsX = paste(\'" + _colName_10);
              String _plus_20 = (_plus_19 + "\'");
              nomsX = _plus_20;
            } else {
              int _column_4 = xPred_2.getVars().get(0).getColumn();
              String _plus_21 = ("nomsX = paste(colnames(mml_data)[" + Integer.valueOf(_column_4));
              String _plus_22 = (_plus_21 + "]");
              nomsX = _plus_22;
            }
            for (int i = 1; (i < xPred_2.getVars().size()); i++) {
              String _colName_11 = xPred_2.getVars().get(i).getColName();
              boolean _tripleNotEquals_3 = (_colName_11 != null);
              if (_tripleNotEquals_3) {
                String _nomsX = nomsX;
                nomsX = (_nomsX + ",\' + \',");
                String _nomsX_1 = nomsX;
                String _colName_12 = xPred_2.getVars().get(i).getColName();
                String _plus_23 = ("\'" + _colName_12);
                String _plus_24 = (_plus_23 + "\'");
                nomsX = (_nomsX_1 + _plus_24);
              } else {
                String _nomsX_2 = nomsX;
                nomsX = (_nomsX_2 + ",\' + \',");
                String _nomsX_3 = nomsX;
                int _column_5 = xPred_2.getVars().get(i).getColumn();
                String _plus_25 = ("colnames(mml_data)[" + Integer.valueOf(_column_5));
                String _plus_26 = (_plus_25 + "]");
                nomsX = (_nomsX_3 + _plus_26);
              }
            }
            String _colName_11 = xPred_2.getVars().get(0).getColName();
            boolean _notEquals_5 = (!Objects.equal(_colName_11, null));
            if (_notEquals_5) {
              String _nomsX = nomsX;
              nomsX = (_nomsX + ")\n");
            } else {
              String _nomsX_1 = nomsX;
              nomsX = (_nomsX_1 + ")\n");
            }
          }
        } else {
          InputOutput.<String>println("Predictive renseignee");
          String _colName_12 = y_1.getColName();
          boolean _notEquals_6 = (!Objects.equal(_colName_12, null));
          if (_notEquals_6) {
            InputOutput.<String>println("Predictive est un string");
            String _colName_13 = y_1.getColName();
            String _plus_23 = ("nomY = \'" + _colName_13);
            String _plus_24 = (_plus_23 + "\'\n");
            nomY = _plus_24;
            String _colName_14 = y_1.getColName();
            String _plus_25 = ("nbPredictive = which(colnames(mml_data) == \'" + _colName_14);
            String _plus_26 = (_plus_25 + "\')\n");
            nbPredictive = _plus_26;
            if ((x_1 instanceof AllVariables)) {
              InputOutput.<String>println("Toutes les variables sont explicatives");
              nomsX = "nomsX = \'.\'\n";
            }
          } else {
            InputOutput.<String>println("Predictive est un int");
            int _column_5 = y_1.getColumn();
            String _plus_27 = ("nomY = colnames(mml_data)[" + Integer.valueOf(_column_5));
            String _plus_28 = (_plus_27 + "] \n");
            nomY = _plus_28;
            int _column_6 = y_1.getColumn();
            String _plus_29 = ("nbPredictive = " + Integer.valueOf(_column_6));
            String _plus_30 = (_plus_29 + "\n");
            nbPredictive = _plus_30;
            if ((x_1 instanceof AllVariables)) {
              InputOutput.<String>println("Toutes les variables sont explicatives");
              nomsX = "nomsX = \'.\'\n";
            }
          }
          if ((x_1 instanceof PredictorVariables)) {
            InputOutput.<String>println("Des variables explicatives ont été données");
            final PredictorVariables xPred_3 = ((PredictorVariables) x_1);
            String _colName_15 = xPred_3.getVars().get(0).getColName();
            boolean _notEquals_7 = (!Objects.equal(_colName_15, null));
            if (_notEquals_7) {
              String _colName_16 = xPred_3.getVars().get(0).getColName();
              String _plus_31 = ("nomsX = paste(\'" + _colName_16);
              String _plus_32 = (_plus_31 + "\'");
              nomsX = _plus_32;
            } else {
              int _column_7 = xPred_3.getVars().get(0).getColumn();
              String _plus_33 = ("nomsX = paste(colnames(mml_data)[" + Integer.valueOf(_column_7));
              String _plus_34 = (_plus_33 + "]");
              nomsX = _plus_34;
            }
            for (int i = 1; (i < xPred_3.getVars().size()); i++) {
              String _colName_17 = xPred_3.getVars().get(i).getColName();
              boolean _notEquals_8 = (!Objects.equal(_colName_17, null));
              if (_notEquals_8) {
                String _nomsX_2 = nomsX;
                nomsX = (_nomsX_2 + ",\' + \',");
                String _nomsX_3 = nomsX;
                String _colName_18 = xPred_3.getVars().get(i).getColName();
                String _plus_35 = ("\'" + _colName_18);
                String _plus_36 = (_plus_35 + "\'");
                nomsX = (_nomsX_3 + _plus_36);
              } else {
                String _nomsX_4 = nomsX;
                nomsX = (_nomsX_4 + ",\' + \',");
                String _nomsX_5 = nomsX;
                int _column_8 = xPred_3.getVars().get(i).getColumn();
                String _plus_37 = ("colnames(mml_data)[" + Integer.valueOf(_column_8));
                String _plus_38 = (_plus_37 + "]");
                nomsX = (_nomsX_5 + _plus_38);
              }
            }
            String _colName_17 = xPred_3.getVars().get(0).getColName();
            boolean _notEquals_8 = (!Objects.equal(_colName_17, null));
            if (_notEquals_8) {
              String _nomsX_2 = nomsX;
              nomsX = (_nomsX_2 + ")\n");
            } else {
              String _nomsX_3 = nomsX;
              nomsX = (_nomsX_3 + ")\n");
            }
          }
        }
      }
      String formuleComplete = ((nomsX + nomY) + "formule = paste(nomY, \'~\',nomsX)\n");
      String _formuleComplete = formuleComplete;
      formuleComplete = (_formuleComplete + "formule = as.formula(formule)\n");
      InputOutput.<String>println("Validation");
      final Validation validationR = m.getValidation();
      final StratificationMethod stratificationR = validationR.getStratification();
      final EList<ValidationMetric> metricR = validationR.getMetric();
      String metricCodeR = "";
      InputOutput.<String>println("Metrique");
      for (int i = 0; (i < metricR.size()); i++) {
        boolean _equals_18 = ValidationMetric.RECALL.equals(metricR.get(i));
        if (_equals_18) {
          String _metricCodeR = metricCodeR;
          metricCodeR = (_metricCodeR + "print(paste(\"Recall = \",recall))\n");
        } else {
          boolean _equals_19 = ValidationMetric.PRECISION.equals(metricR.get(i));
          if (_equals_19) {
            String _metricCodeR_1 = metricCodeR;
            metricCodeR = (_metricCodeR_1 + "print(paste(\"Precision = \",precision))\n");
          } else {
            boolean _equals_20 = ValidationMetric.F1.equals(metricR.get(i));
            if (_equals_20) {
              String _metricCodeR_2 = metricCodeR;
              metricCodeR = (_metricCodeR_2 + "print(paste(\"f1_score = \",f1))\n");
            }
          }
        }
      }
      String RstratificationCode = "library(MLmetrics)\n";
      InputOutput.<String>println("Stratification");
      if ((stratificationR instanceof CrossValidation)) {
        InputOutput.<String>println("CrossValidation");
        CrossValidation cross_1 = ((CrossValidation) stratificationR);
        final int numRep_1 = cross_1.getNumber();
        String _RstratificationCode = RstratificationCode;
        RstratificationCode = (_RstratificationCode + "library(caret)\n");
        String _RstratificationCode_1 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_1 + (("folds <- createFolds(factor(mml_data$variety), k = " + Integer.valueOf(numRep_1)) + ", list = TRUE, returnTrain = TRUE)\n"));
        String _RstratificationCode_2 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_2 + "f1 <- 0\n");
        String _RstratificationCode_3 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_3 + "recall <- 0\n");
        String _RstratificationCode_4 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_4 + "precision <- 0\n");
        String _RstratificationCode_5 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_5 + "for(test_ind in folds){\n");
        String _RstratificationCode_6 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_6 + "train <- mml_data[-test_ind, ]\n");
        String _RstratificationCode_7 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_7 + "test <- mml_data[test_ind, ]\n");
        String _RstratificationCode_8 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_8 + "x_test <- test[,-nbPredictive]\n");
        String _RstratificationCode_9 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_9 + "y_test <- test[,nbPredictive]\n");
        String _RstratificationCode_10 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_10 + RalgoML);
        String _RstratificationCode_11 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_11 + "ypred <- predict(classifier,test,type=\'class\')\n");
        String _RstratificationCode_12 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_12 + "f1 <- f1 + F1_Score(y_test, ypred, positive = NULL)\n");
        String _RstratificationCode_13 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_13 + "recall <- recall + Recall(y_test, ypred, positive = NULL)\n");
        String _RstratificationCode_14 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_14 + "precision <- precision + Precision(y_test, ypred, positive = NULL)\n");
        String _RstratificationCode_15 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_15 + "}\n");
        String _RstratificationCode_16 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_16 + "recall = recall/length(folds)\n");
        String _RstratificationCode_17 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_17 + "f1 = f1/length(folds)\n");
        String _RstratificationCode_18 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_18 + "precision = f1/length(folds)\n");
      } else {
        InputOutput.<String>println("TrainingTest");
        TrainingTest trainTestR = ((TrainingTest) stratificationR);
        int pourcentageTraining_1 = trainTestR.getNumber();
        double pourcentage_1 = ((100 - (pourcentageTraining_1 * 1.0)) / 100);
        InputOutput.<Double>println(Double.valueOf(pourcentage_1));
        String _RstratificationCode_19 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_19 + (("pourcentage = " + Double.valueOf(pourcentage_1)) + "\n"));
        String _RstratificationCode_20 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_20 + "test_ind <- sample(seq_len(nrow(mml_data)), size = pourcentage*nrow(mml_data))\n");
        String _RstratificationCode_21 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_21 + "train <- mml_data[-test_ind, ]\n");
        String _RstratificationCode_22 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_22 + "test <- mml_data[test_ind, ]\n");
        String _RstratificationCode_23 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_23 + "x_test <- test[,-nbPredictive]\n");
        String _RstratificationCode_24 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_24 + "y_test <- test[,nbPredictive]\n");
        String _RstratificationCode_25 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_25 + RalgoML);
        String _RstratificationCode_26 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_26 + "ypred <- predict(classifier,x_test,type=\"class\")\n");
        String _RstratificationCode_27 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_27 + "f1 <- F1_Score(y_test, ypred, positive = NULL)\n");
        String _RstratificationCode_28 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_28 + "recall <- Recall(y_test, ypred, positive = NULL)\n");
        String _RstratificationCode_29 = RstratificationCode;
        RstratificationCode = (_RstratificationCode_29 + " precision <- Precision(y_test, ypred, positive = NULL)\n");
      }
      String _RCode = RCode;
      RCode = (_RCode + "\nprint (mml_data)\n");
      String _RCode_1 = RCode;
      RCode = (_RCode_1 + formuleComplete);
      String _RCode_2 = RCode;
      RCode = (_RCode_2 + nbPredictive);
      String _RCode_3 = RCode;
      RCode = (_RCode_3 + RstratificationCode);
      String _RCode_4 = RCode;
      RCode = (_RCode_4 + metricCodeR);
      return RCode;
    }
    return "";
  }
  
  private String compile(final MMLModel m) {
    final DataInput dataInput = m.getInput();
    final String fileLocation = dataInput.getFilelocation();
    final String pythonImport = "import pandas as pd\n";
    final String DEFAULT_COLUMN_SEPARATOR = ",";
    String csv_separator = DEFAULT_COLUMN_SEPARATOR;
    final CSVParsingConfiguration parsingInstruction = dataInput.getParsingInstruction();
    if ((parsingInstruction != null)) {
      System.err.println(("parsing instruction..." + parsingInstruction));
      csv_separator = parsingInstruction.getSep().toString();
    }
    String _mkValueInSingleQuote = this.mkValueInSingleQuote(fileLocation);
    String _plus = ("mml_data = pd.read_csv(" + _mkValueInSingleQuote);
    String _plus_1 = (_plus + ", sep=");
    String _mkValueInSingleQuote_1 = this.mkValueInSingleQuote(csv_separator);
    String _plus_2 = (_plus_1 + _mkValueInSingleQuote_1);
    final String csvReading = (_plus_2 + ")");
    String pandasCode = (pythonImport + csvReading);
    String _pandasCode = pandasCode;
    pandasCode = (_pandasCode + "\nprint (mml_data)\n");
    return pandasCode;
  }
  
  private String mkValueInSingleQuote(final String v) {
    return (("\'" + v) + "\'");
  }
}
