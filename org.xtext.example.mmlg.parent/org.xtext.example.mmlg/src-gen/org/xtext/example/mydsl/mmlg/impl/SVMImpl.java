/**
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.mmlg.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.mmlg.MmlgPackage;
import org.xtext.example.mydsl.mmlg.SVM;
import org.xtext.example.mydsl.mmlg.SVMClassification;
import org.xtext.example.mydsl.mmlg.SVMKernel;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>SVM</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.mmlg.impl.SVMImpl#getGamma <em>Gamma</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.mmlg.impl.SVMImpl#getC <em>C</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.mmlg.impl.SVMImpl#getKernel <em>Kernel</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.mmlg.impl.SVMImpl#getSvmclassification <em>Svmclassification</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SVMImpl extends MLAlgorithmImpl implements SVM
{
  /**
   * The default value of the '{@link #getGamma() <em>Gamma</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGamma()
   * @generated
   * @ordered
   */
  protected static final String GAMMA_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGamma() <em>Gamma</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGamma()
   * @generated
   * @ordered
   */
  protected String gamma = GAMMA_EDEFAULT;

  /**
   * The default value of the '{@link #getC() <em>C</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getC()
   * @generated
   * @ordered
   */
  protected static final String C_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getC() <em>C</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getC()
   * @generated
   * @ordered
   */
  protected String c = C_EDEFAULT;

  /**
   * The default value of the '{@link #getKernel() <em>Kernel</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKernel()
   * @generated
   * @ordered
   */
  protected static final SVMKernel KERNEL_EDEFAULT = SVMKernel.LINEAR;

  /**
   * The cached value of the '{@link #getKernel() <em>Kernel</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKernel()
   * @generated
   * @ordered
   */
  protected SVMKernel kernel = KERNEL_EDEFAULT;

  /**
   * The default value of the '{@link #getSvmclassification() <em>Svmclassification</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSvmclassification()
   * @generated
   * @ordered
   */
  protected static final SVMClassification SVMCLASSIFICATION_EDEFAULT = SVMClassification.CCLASS;

  /**
   * The cached value of the '{@link #getSvmclassification() <em>Svmclassification</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSvmclassification()
   * @generated
   * @ordered
   */
  protected SVMClassification svmclassification = SVMCLASSIFICATION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SVMImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MmlgPackage.Literals.SVM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGamma()
  {
    return gamma;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGamma(String newGamma)
  {
    String oldGamma = gamma;
    gamma = newGamma;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MmlgPackage.SVM__GAMMA, oldGamma, gamma));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getC()
  {
    return c;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setC(String newC)
  {
    String oldC = c;
    c = newC;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MmlgPackage.SVM__C, oldC, c));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SVMKernel getKernel()
  {
    return kernel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setKernel(SVMKernel newKernel)
  {
    SVMKernel oldKernel = kernel;
    kernel = newKernel == null ? KERNEL_EDEFAULT : newKernel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MmlgPackage.SVM__KERNEL, oldKernel, kernel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SVMClassification getSvmclassification()
  {
    return svmclassification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSvmclassification(SVMClassification newSvmclassification)
  {
    SVMClassification oldSvmclassification = svmclassification;
    svmclassification = newSvmclassification == null ? SVMCLASSIFICATION_EDEFAULT : newSvmclassification;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MmlgPackage.SVM__SVMCLASSIFICATION, oldSvmclassification, svmclassification));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MmlgPackage.SVM__GAMMA:
        return getGamma();
      case MmlgPackage.SVM__C:
        return getC();
      case MmlgPackage.SVM__KERNEL:
        return getKernel();
      case MmlgPackage.SVM__SVMCLASSIFICATION:
        return getSvmclassification();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MmlgPackage.SVM__GAMMA:
        setGamma((String)newValue);
        return;
      case MmlgPackage.SVM__C:
        setC((String)newValue);
        return;
      case MmlgPackage.SVM__KERNEL:
        setKernel((SVMKernel)newValue);
        return;
      case MmlgPackage.SVM__SVMCLASSIFICATION:
        setSvmclassification((SVMClassification)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MmlgPackage.SVM__GAMMA:
        setGamma(GAMMA_EDEFAULT);
        return;
      case MmlgPackage.SVM__C:
        setC(C_EDEFAULT);
        return;
      case MmlgPackage.SVM__KERNEL:
        setKernel(KERNEL_EDEFAULT);
        return;
      case MmlgPackage.SVM__SVMCLASSIFICATION:
        setSvmclassification(SVMCLASSIFICATION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MmlgPackage.SVM__GAMMA:
        return GAMMA_EDEFAULT == null ? gamma != null : !GAMMA_EDEFAULT.equals(gamma);
      case MmlgPackage.SVM__C:
        return C_EDEFAULT == null ? c != null : !C_EDEFAULT.equals(c);
      case MmlgPackage.SVM__KERNEL:
        return kernel != KERNEL_EDEFAULT;
      case MmlgPackage.SVM__SVMCLASSIFICATION:
        return svmclassification != SVMCLASSIFICATION_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (gamma: ");
    result.append(gamma);
    result.append(", C: ");
    result.append(c);
    result.append(", kernel: ");
    result.append(kernel);
    result.append(", svmclassification: ");
    result.append(svmclassification);
    result.append(')');
    return result.toString();
  }

} //SVMImpl
